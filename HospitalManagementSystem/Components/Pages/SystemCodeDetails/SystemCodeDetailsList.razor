@page "/systemcodesdetails"
@attribute [StreamRendering]

@using HospitalManagementSystem.Data
@using HospitalManagementSystem.Models
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization;
@inject UserManager<ApplicationUser> usermanager;
@attribute [Authorize]
@inject NavigationManager navigation
@using MudBlazor
@if (SystemCodeDetailsList == null)
{
    <MudProgressCircular Color="Color.Primary" class="spinner-border" Indeterminate="true" />
}
else
{
    <PageTitle>System Code Details List</PageTitle>
    <MudCard Elevation="28">
        <MudCardHeader>
            <MudCardContent>
                <div class="d-flex justify-content-end">
                    <MudButton Href="/addsystemcode" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                        Add System Code Details
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCardHeader>
        <MudCardContent>

            <MudDataGrid Items="@SystemCodeDetailsList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Code" Title="Code Name" />
                    <PropertyColumn Property="x => x.Description" Title="Code Description" />
                    <PropertyColumn Property="x => x.SystemCode.Code" Title="Parent Code" />
                    <PropertyColumn Property="x => x.OrderNo" />
                    <PropertyColumn Property="x => x.CreatedBy.FullName" Title="Created By"/>
                    <PropertyColumn Property="x => x.CreatedOn" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudButton Variant="Variant.Filled" StatrtIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                                <MudButton Variant="Variant.Filled" StatrtIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
}

@code {

    public List<SystemCodeDetail> SystemCodeDetailsList { get; set; } = new();

    public string UserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currentuser = await usermanager.GetUserAsync(user);
            UserId = currentuser.Id;
        }

        SystemCodeDetailsList = await SystemCodeDetailService.GetSystemCodeDetailsAsync();
    }

}
