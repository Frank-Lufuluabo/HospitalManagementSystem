@page "/systemcodes"
@attribute [StreamRendering]
@using HospitalManagementSystem.Data
@using HospitalManagementSystem.Models
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization;
@inject UserManager<ApplicationUser> usermanager;
@attribute [Authorize]
@inject NavigationManager navigation
@using MudBlazor

<PageTitle>System Codes List</PageTitle>
<MuddCard Elevation="28">
    <MudCardHeader>
        <MudCardContent>
            <div class="d-flex justify-content-end">
                <MudButton Href="/addsystemcode" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                    Add System Code
                </MudButton>
            </div>
        </MudCardContent>
    </MudCardHeader>
    <MudCardContent>


@* <p><a href="/addsystemcodes" class="btn btn-primary float-end">Add New System Code</a></p> *@
        <MudDataGrid Items="@SystemCodesList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.Code" Title="Code Name" />
                <PropertyColumn Property="x => x.Description" Title="Code Description" />
                <PropertyColumn Property="x => x.OrderNo" />
                <PropertyColumn Property="x => x.CreatedBy.FullName" />
                <PropertyColumn Property="x => x.CreatedOn" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Variant="Variant.Filled" StatrtIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" StatrtIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCardContent>
</MuddCard>

@code {

    public List<SystemCode> SystemCodesList { get; set; } = new();

    public string UserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currentuser = await usermanager.GetUserAsync(user);
            UserId = currentuser.Id;
        }

        SystemCodesList = await SystemCodeService.GetSystemCodesAsync();
    }

}
